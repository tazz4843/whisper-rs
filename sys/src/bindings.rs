/* automatically generated by rust-bindgen 0.59.2 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const WHISPER_SAMPLE_RATE: u32 = 16000;
pub const WHISPER_N_FFT: u32 = 400;
pub const WHISPER_N_MEL: u32 = 80;
pub const WHISPER_HOP_LENGTH: u32 = 160;
pub const WHISPER_CHUNK_SIZE: u32 = 30;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_context {
    _unused: [u8; 0],
}
pub type whisper_token = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_token_data {
    pub id: ::std::os::raw::c_int,
    pub tid: ::std::os::raw::c_int,
    pub p: ::std::os::raw::c_float,
    pub pt: ::std::os::raw::c_float,
    pub ptsum: ::std::os::raw::c_float,
    pub t0: ::std::os::raw::c_long,
    pub t1: ::std::os::raw::c_long,
    pub vlen: ::std::os::raw::c_float,
}
extern "C" {
    pub fn whisper_init(path_model: *const ::std::os::raw::c_char) -> *mut whisper_context;
}
extern "C" {
    pub fn whisper_free(ctx: *mut whisper_context);
}
extern "C" {
    pub fn whisper_pcm_to_mel(
        ctx: *mut whisper_context,
        samples: *const f32,
        n_samples: ::std::os::raw::c_int,
        n_threads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_set_mel(
        ctx: *mut whisper_context,
        data: *const f32,
        n_len: ::std::os::raw::c_int,
        n_mel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_encode(
        ctx: *mut whisper_context,
        offset: ::std::os::raw::c_int,
        n_threads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_decode(
        ctx: *mut whisper_context,
        tokens: *const whisper_token,
        n_tokens: ::std::os::raw::c_int,
        n_past: ::std::os::raw::c_int,
        n_threads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_sample_best(ctx: *mut whisper_context) -> whisper_token_data;
}
extern "C" {
    pub fn whisper_sample_timestamp(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_lang_id(lang: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_n_len(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_n_vocab(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_n_text_ctx(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_is_multilingual(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_get_probs(ctx: *mut whisper_context) -> *mut f32;
}
extern "C" {
    pub fn whisper_token_to_str(
        ctx: *mut whisper_context,
        token: whisper_token,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn whisper_token_eot(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_sot(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_prev(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_solm(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_not(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_beg(ctx: *mut whisper_context) -> whisper_token;
}
extern "C" {
    pub fn whisper_token_translate() -> whisper_token;
}
extern "C" {
    pub fn whisper_token_transcribe() -> whisper_token;
}
extern "C" {
    pub fn whisper_print_timings(ctx: *mut whisper_context);
}
pub const whisper_sampling_strategy_WHISPER_SAMPLING_GREEDY: whisper_sampling_strategy = 0;
pub const whisper_sampling_strategy_WHISPER_SAMPLING_BEAM_SEARCH: whisper_sampling_strategy = 1;
#[doc = ""]
pub type whisper_sampling_strategy = ::std::os::raw::c_uint;
pub type whisper_new_segment_callback = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut whisper_context, user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_full_params {
    pub strategy: whisper_sampling_strategy,
    pub n_threads: ::std::os::raw::c_int,
    pub offset_ms: ::std::os::raw::c_int,
    pub translate: bool,
    pub no_context: bool,
    pub print_special_tokens: bool,
    pub print_progress: bool,
    pub print_realtime: bool,
    pub print_timestamps: bool,
    pub language: *const ::std::os::raw::c_char,
    pub greedy: whisper_full_params__bindgen_ty_1,
    pub beam_search: whisper_full_params__bindgen_ty_2,
    pub new_segment_callback: whisper_new_segment_callback,
    pub new_segment_callback_user_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_full_params__bindgen_ty_1 {
    pub n_past: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_whisper_full_params__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<whisper_full_params__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(whisper_full_params__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<whisper_full_params__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(whisper_full_params__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<whisper_full_params__bindgen_ty_1>())).n_past as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params__bindgen_ty_1),
            "::",
            stringify!(n_past)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whisper_full_params__bindgen_ty_2 {
    pub n_past: ::std::os::raw::c_int,
    pub beam_width: ::std::os::raw::c_int,
    pub n_best: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_whisper_full_params__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<whisper_full_params__bindgen_ty_2>(),
        12usize,
        concat!("Size of: ", stringify!(whisper_full_params__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<whisper_full_params__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(whisper_full_params__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<whisper_full_params__bindgen_ty_2>())).n_past as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params__bindgen_ty_2),
            "::",
            stringify!(n_past)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<whisper_full_params__bindgen_ty_2>())).beam_width as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params__bindgen_ty_2),
            "::",
            stringify!(beam_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<whisper_full_params__bindgen_ty_2>())).n_best as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params__bindgen_ty_2),
            "::",
            stringify!(n_best)
        )
    );
}
#[test]
fn bindgen_test_layout_whisper_full_params() {
    assert_eq!(
        ::std::mem::size_of::<whisper_full_params>(),
        64usize,
        concat!("Size of: ", stringify!(whisper_full_params))
    );
    assert_eq!(
        ::std::mem::align_of::<whisper_full_params>(),
        8usize,
        concat!("Alignment of ", stringify!(whisper_full_params))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<whisper_full_params>())).strategy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<whisper_full_params>())).n_threads as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(n_threads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<whisper_full_params>())).offset_ms as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(offset_ms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<whisper_full_params>())).translate as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(translate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<whisper_full_params>())).no_context as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(no_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<whisper_full_params>())).print_special_tokens as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(print_special_tokens)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<whisper_full_params>())).print_progress as *const _ as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(print_progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<whisper_full_params>())).print_realtime as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(print_realtime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<whisper_full_params>())).print_timestamps as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(print_timestamps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<whisper_full_params>())).language as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(language)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<whisper_full_params>())).greedy as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(greedy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<whisper_full_params>())).beam_search as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(beam_search)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<whisper_full_params>())).new_segment_callback as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(new_segment_callback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<whisper_full_params>())).new_segment_callback_user_data
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(whisper_full_params),
            "::",
            stringify!(new_segment_callback_user_data)
        )
    );
}
extern "C" {
    pub fn whisper_full_default_params(strategy: whisper_sampling_strategy) -> whisper_full_params;
}
extern "C" {
    pub fn whisper_full(
        ctx: *mut whisper_context,
        params: whisper_full_params,
        samples: *const f32,
        n_samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_full_n_segments(ctx: *mut whisper_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_full_get_segment_t0(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
    ) -> i64;
}
extern "C" {
    pub fn whisper_full_get_segment_t1(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
    ) -> i64;
}
extern "C" {
    pub fn whisper_full_get_segment_text(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn whisper_full_n_tokens(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whisper_full_get_token_text(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
        i_token: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn whisper_full_get_token_id(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
        i_token: ::std::os::raw::c_int,
    ) -> whisper_token;
}
extern "C" {
    pub fn whisper_full_get_token_p(
        ctx: *mut whisper_context,
        i_segment: ::std::os::raw::c_int,
        i_token: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn whisper_print_system_info() -> *const ::std::os::raw::c_char;
}
